import _ from 'lodash-es';

// ** Clonar objetos o elementos
/*En Javascript, as√≠ como en muchos otros lenguajes, 
necesitaremos en ocasiones copiar o clonar elementos de nuestro c√≥digo, 
de forma que podamos cambiar uno y dejar intacto el original. Para ello, 
Javascript (al igual que en otros lenguajes) tiene dos mecanismos para copiar elementos:

ü•Ç Copia por valor (Duplica el contenido)
üîÆ Copia por referencia (Hace referencia a d√≥nde est√° el contenido)*/

// ** Copia por valor
/*El primero de ellos, la copia por valor, se realiza con los tipos de datos m√°s b√°sicos, 
es decir, los tipos de datos primitivos, es decir: , , , etc. 
Esto ocurre as√≠ porque son estructuras simples y r√°pidas de copiar.

La copia por valor significa que simplemente se crea una nueva variable o constante 
y se asigna el mismo valor que tiene la variable original. 
Lo que a efectos pr√°cticos cualquiera imaginar√≠a como una copia: */

let originalValue1 = 42;

// Creamos una copia del valor de originalValue
let copy1 = originalValue1;

originalValue1;    // 42
copy1;             // 42

// Alteramos el valor de copy1
copy1 = 55;

originalValue1;    // 42
copy1;             // 55

/*Como puedes ver, todo ocurre de forma predecible. 
Al alterar el valor de copy, este es modificado y por otro lado, 
el valor de originalValue sigue siendo el valor original. */

// ** Copia por referencia
/*El segundo mecanismo es la copia por referencia, y es un poco m√°s complejo. 
En Javascript, como en otros lenguajes, al almacenar la informaci√≥n en una variable, 
esta se guarda en una direcci√≥n de memoria.

Con estructuras de datos m√°s complejas como ,  u otros, esta informaci√≥n no se copia por valor, 
puesto que podr√≠amos tener estructuras muy complejas 
donde pueden haber muchos niveles de profundidad (array que contiene arrays,
que a su vez cada uno de ellos contienen arrays y a su vez cada uno de ellos contienen arrays...).

Para simplificar el proceso, lo que se hace con estos tipos de datos m√°s complejos, 
es que la copia ser√° una referencia al elemento original, algo que es mucho m√°s pr√°ctico y r√°pido, 
pero con lo que hay que tener mucho cuidado:
 */

let originalValue2 = { name: "ManzDev" };

// Creamos una supuesta copia del valor de originalValue2
let copy2 = originalValue2;

originalValue2;    // { name: "ManzDev" }
copy2;             // { name: "ManzDev" }

// Alteramos el valor de copy2
copy2.name = "Niv3k_el_pato";

originalValue2;    // { name: "Niv3k_el_pato" }
copy2;             // { name: "Niv3k_el_pato" }

/*Como puedes ver, la modificar la propiedad name de copy, 
tambi√©n se altera la propiedad name de originalValue puesto que copy solo 
es una referencia a la estructura original, es decir, est√° ligado a originalValue. 
Al cambiar cualquiera de ellos, se modificar√° el otro. */

// ** Clonando variables o constantes
/*Y entonces... ¬øQu√© puedo hacer para clonar o copiar estructuras de datos complejas sin este problema? 
Antes de nada tenemos que conocer dos conceptos importantes:

üéà Clonaci√≥n superficial (Shallow clone): Se llama as√≠ cuando realizamos una clonaci√≥n 
de una estructura de datos y s√≥lo se copia su primer nivel, mientras que segundo y niveles m√°s profundos, 
se crean referencias.

üß® Clonaci√≥n profunda (Deep clone): Se llama as√≠ cuando realizamos una clonaci√≥n 
de una estructura de datos a todos sus niveles.

Observa esta estructura de datos: */

const data = {
    name: "ManzDev",        // Se clona en superficial y en profundidad
    tired: false,           // Se clona en superficial y en profundidad
    likes: ["css", "javascript", "html", "vue"], // S√≥lo en profundidad
    numbers: [4, 8, 15, 16, 23, 42]              // S√≥lo en profundidad
};

console.log("Este es el data original ", data, "\n");

// Si realizamos una clonaci√≥n superficial, solo clonar√≠amos los tipos de datos b√°sicos (los dos primeros).

// ! Los dos √∫ltimos, al ser estructuras complejas en s√≠ mismas, no se realizar√≠a una clonaci√≥n, 
/* sino que ser√≠a una referencia al elemento original, 
modificando ambos si alteramos uno de sus elementos, como vimos anteriormente. 

Si realizamos una clonaci√≥n profunda, no tendr√≠amos este problema, se clonar√≠an todos los elementos, 
independientemente del nivel de profundidad.*/

// const copy3 = data;

// copy3.name = "Niv3k_el_pato";

// console.log("Clonacion superficial ", copy3);
// copy3.likes.push("React"); 
// console.log("Clonacion superficial de copy3 ", copy3);
// console.log("\n");
// console.log("Clonacion superficial de data ", data);



// ** Clonando elementos en Javascript

//Tradicionalmente, hay varias aproximaciones, vamos a explicarlas, junto a sus ventajas y desventajas:

//? Estrategia - Clonaci√≥n superficial - Clonaci√≥n profunda - Tipos de datos avanzados - Nativo	M√°s info
/*
Asignaci√≥n =	‚ùå No	‚ùå No	‚ùå No	‚úÖ S√≠	
Usar Object.assign()	‚úÖ S√≠	‚ùå No	‚ùå No	‚úÖ S√≠
Usar spread ...	‚úÖ S√≠	‚ùå No	‚ùå No	‚úÖ S√≠	Copias con spread
Serializar con JSON.parse()	‚úÖ S√≠	‚úÖ S√≠	‚ö†Ô∏è Solo tipos b√°sicos
‚ö†Ô∏è No funciones/DOM	‚úÖ S√≠	JSON
Usar _.cloneDeep() de Lodash	‚úÖ S√≠	‚úÖ S√≠	‚úÖ Tipos avanzados
‚ö†Ô∏è No DOM	‚ùå No	cloneDeep
Usar structuredClone()	‚úÖ S√≠	‚úÖ S√≠	‚úÖ Tipos avanzados
‚ö†Ô∏è No funciones/DOM	‚úÖ S√≠	Este post
Veamos un ejemplo de cada uno sobre el elemento data anterior. En primer lugar, 
veamos las formas que permiten clonaci√≥n superficial, pero no clonaci√≥n profunda: */

// ‚ùå Esto no realiza una clonaci√≥n, es una referencia al original
const copy3 = data;
console.log("‚ùå Esto no realiza una clonaci√≥n, es una referencia al original ",copy3, "\n");
// ‚ùå S√≥lo superficial (Hay que crear objeto con el mismo tipo)
const copy4 = {};
Object.assign(copy4, data);
console.log("‚ùå S√≥lo superficial (Hay que crear objeto con el mismo tipo) ",copy4, "\n");


// ‚ùå S√≥lo superficial
const copy5 = { ...data };
console.log("‚ùå S√≥lo superficial ",copy5, "\n");

/*El ... (spread) o el Object.assign() pueden interesarnos si necesitamos un mecanismo r√°pido de clonaci√≥n, 
tenemos estructuras de un solo nivel y no nos interesan tipos de datos avanzados, sino datos primitivos.

Ahora veamos las formas donde podemos realizar clonaci√≥n profunda y copiar los elementos 
incluso a niveles de profundidad mayores y no s√≥lo el primer nivel (como ocurre en la clonaci√≥n superficial): */

// ‚úÖ El truco de JSON funciona, ‚ùå pero estamos limitados a los tipos de JSON
const string = JSON.stringify(data);
const copy6 = JSON.parse(string);
console.log("‚úÖ El truco de JSON funciona, ‚ùå pero estamos limitados a los tipos de JSON ", copy6, "\n");

// ‚úÖ Con Lodash, ten en cuenta que necesitaremos descargar/parsear librer√≠a externa
import { cloneDeep } from "lodash-es";
const copy7 = cloneDeep(data);
console.log("‚úÖ Con Lodash, ten en cuenta que necesitaremos descargar/parsear librer√≠a externa ", copy6, "\n");

// ‚úÖ Con structuredClone, ciertos tipos (funciones, DOM) devuelven excepci√≥n
const copy8 = structuredClone(data);
console.log("‚úÖ Con structuredClone, ciertos tipos (funciones, DOM) devuelven excepci√≥n ", copy6, "\n");

/*Como conclusi√≥n:

Usa ... (spread) o Object.assign() si trabajas con datos primitivos y un s√≥lo nivel de profundidad.
Usa JSON.parse() y JSON.stringify() en el mismo caso. √ötil si necesitas navegadores muy antiguos.
Usa structuredClone() si quieres un clonado moderno, que soporte diferentes niveles de profundidad.
Usa cloneDeep() de Lodash si requieres clonado de funciones y no te supone un coste incluir dependencias externas.
Por aqu√≠ tienes una tabla resumen donde puedes ver que tipos de datos puede clonar cada uno 
de los m√©todos que permiten clonaci√≥n profunda: */

// ? Tipo de dato	...spread / Object.assign()	JSON.parse()	_.cloneDeep()	structuredClone()
/*
Tipos b√°sicos (primitivos)
NUMBER - ‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠
STRING - ‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠
BOOLEAN -‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠
undefined	‚úÖ S√≠	‚ö†Ô∏è null	‚úÖ S√≠	‚úÖ S√≠
null	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠
Tipos complejos (no primitivos)
ARRAY - ‚ùå No, referencia	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠
OBJECT - ‚ùå No, referencia	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠
DATE - ‚ùå No, referencia	‚ö†Ô∏è string	‚úÖ S√≠	‚úÖ S√≠
BIGINT‚ùå No, referencia	‚ùå Devuelve TypeError	‚úÖ S√≠	‚úÖ S√≠
REGEXP -‚ùå No, referencia	‚ö†Ô∏è {} vac√≠o	‚úÖ S√≠	‚úÖ S√≠
MAP/SET - ‚ùå No, referencia	‚ö†Ô∏è {} vac√≠o	‚úÖ S√≠	‚úÖ S√≠
SYMBOL - ‚ùå No, referencia	‚úÖ S√≠	‚úÖ S√≠	‚ùå Devuelve DOMException
FUNCTION/CLASS - ‚ùå No, referencia	‚ö†Ô∏è null	‚úÖ S√≠	‚ùå Devuelve DOMException
Elemento del DOM	‚ùå No, referencia	‚ö†Ô∏è {} vac√≠o	‚ùå No, referencia	‚ùå Devuelve DOMException


En principio, en estructuras de datos no deber√≠an existir elementos del DOM ni funciones, 
por lo que structuredClone() deber√≠a ser la mejor opci√≥n. No obstante, si lo que deseas 
es clonar ciertas estructuras que adem√°s contienen funciones o elementos del DOM, lo mejor ser√≠a decantarse por cloneDeep().

Ten en cuenta que aunque puede ser atractivo el m√©todo _.cloneDeep() por soportar todos los tipos de datos, 
tambi√©n hay que tener en cuenta que no se trata de un m√©todo nativo del navegador, 
sino que se trata de una librer√≠a externa, que debe cargarse, parsearse y ejecutarse 
y que con estructuras muy complejas puede ser lenta o pesada. */

